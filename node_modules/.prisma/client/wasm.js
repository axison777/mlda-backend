
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  PrismaClientKnownRequestError,
  PrismaClientUnknownRequestError,
  PrismaClientRustPanicError,
  PrismaClientInitializationError,
  PrismaClientValidationError,
  getPrismaClient,
  sqltag,
  empty,
  join,
  raw,
  skip,
  Decimal,
  Debug,
  objectEnumValues,
  makeStrictEnum,
  Extensions,
  warnOnce,
  defineDmmfProperty,
  Public,
  getRuntime,
  createParam,
} = require('@prisma/client/runtime/wasm-engine-edge.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = PrismaClientKnownRequestError;
Prisma.PrismaClientUnknownRequestError = PrismaClientUnknownRequestError
Prisma.PrismaClientRustPanicError = PrismaClientRustPanicError
Prisma.PrismaClientInitializationError = PrismaClientInitializationError
Prisma.PrismaClientValidationError = PrismaClientValidationError
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = sqltag
Prisma.empty = empty
Prisma.join = join
Prisma.raw = raw
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = Extensions.getExtensionContext
Prisma.defineExtension = Extensions.defineExtension

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}





/**
 * Enums
 */
exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  userId: 'userId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  level: 'level',
  price: 'price',
  thumbnail: 'thumbnail',
  status: 'status',
  featured: 'featured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teacherId: 'teacherId'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  videoUrl: 'videoUrl',
  order: 'order',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  enrolledAt: 'enrolledAt',
  progress: 'progress',
  studentId: 'studentId',
  courseId: 'courseId'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  completed: 'completed',
  timeSpent: 'timeSpent',
  studentId: 'studentId',
  lessonId: 'lessonId'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  title: 'title',
  lessonId: 'lessonId'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId'
};

exports.Prisma.ChoiceScalarFieldEnum = {
  id: 'id',
  text: 'text',
  isCorrect: 'isCorrect',
  questionId: 'questionId'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  score: 'score',
  timeSpent: 'timeSpent',
  submittedAt: 'submittedAt',
  studentId: 'studentId',
  quizId: 'quizId'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  choiceId: 'choiceId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  imageUrl: 'imageUrl',
  category: 'category',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  provider: 'provider',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.PaymentItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  paymentId: 'paymentId',
  productId: 'productId',
  courseId: 'courseId'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  authorId: 'authorId',
  courseId: 'courseId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  read: 'read',
  createdAt: 'createdAt',
  senderId: 'senderId',
  recipientId: 'recipientId'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  earnedAt: 'earnedAt',
  userId: 'userId',
  achievementId: 'achievementId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  budget: 'budget',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  userId: 'userId'
};

exports.Prisma.CourseOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnail: 'thumbnail',
  teacherId: 'teacherId'
};

exports.Prisma.LessonOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  videoUrl: 'videoUrl',
  courseId: 'courseId'
};

exports.Prisma.EnrollmentOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId'
};

exports.Prisma.LessonProgressOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  lessonId: 'lessonId'
};

exports.Prisma.QuizOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  lessonId: 'lessonId'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId'
};

exports.Prisma.ChoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  questionId: 'questionId'
};

exports.Prisma.QuizAttemptOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  quizId: 'quizId'
};

exports.Prisma.AnswerOrderByRelevanceFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  choiceId: 'choiceId'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  category: 'category'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  currency: 'currency',
  provider: 'provider',
  transactionId: 'transactionId',
  userId: 'userId'
};

exports.Prisma.PaymentItemOrderByRelevanceFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  productId: 'productId',
  courseId: 'courseId'
};

exports.Prisma.AnnouncementOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  courseId: 'courseId'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  recipientId: 'recipientId'
};

exports.Prisma.AchievementOrderByRelevanceFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
};

exports.Prisma.UserAchievementOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId'
};

exports.Prisma.CampaignOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT'
};

exports.CourseLevel = exports.$Enums.CourseLevel = {
  A1: 'A1',
  A2: 'A2',
  B1: 'B1',
  B2: 'B2',
  C1: 'C1',
  C2: 'C2'
};

exports.PublishStatus = exports.$Enums.PublishStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  ENDED: 'ENDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Course: 'Course',
  Lesson: 'Lesson',
  Enrollment: 'Enrollment',
  LessonProgress: 'LessonProgress',
  Quiz: 'Quiz',
  Question: 'Question',
  Choice: 'Choice',
  QuizAttempt: 'QuizAttempt',
  Answer: 'Answer',
  Product: 'Product',
  Payment: 'Payment',
  PaymentItem: 'PaymentItem',
  Announcement: 'Announcement',
  Message: 'Message',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Campaign: 'Campaign'
};
/**
 * Create the Client
 */
const config = {
  "generator": {
    "name": "client",
    "provider": {
      "fromEnvVar": null,
      "value": "prisma-client-js"
    },
    "output": {
      "value": "/app/node_modules/@prisma/client",
      "fromEnvVar": null
    },
    "config": {
      "engineType": "library"
    },
    "binaryTargets": [
      {
        "fromEnvVar": null,
        "value": "debian-openssl-3.0.x",
        "native": true
      }
    ],
    "previewFeatures": [],
    "sourceFilePath": "/app/prisma/schema.prisma"
  },
  "relativeEnvPaths": {
    "rootEnvPath": null
  },
  "relativePath": "../../../prisma",
  "clientVersion": "6.16.2",
  "engineVersion": "1c57fdcd7e44b29b9313256c76699e91c3ac3c43",
  "datasourceNames": [
    "db"
  ],
  "activeProvider": "mysql",
  "postinstall": false,
  "inlineDatasources": {
    "db": {
      "url": {
        "fromEnvVar": "DATABASE_URL",
        "value": null
      }
    }
  },
  "inlineSchema": "// This is your Prisma schema file,\n// learn more about it in the docs: https://pris.ly/d/prisma-schema\n\n// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?\n// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init\n\ndatasource db {\n  provider = \"mysql\"\n  url      = env(\"DATABASE_URL\")\n}\n\ngenerator client {\n  provider = \"prisma-client-js\"\n}\n\n// --- Modèles de base ---\n\nmodel User {\n  id        String   @id @default(cuid())\n  email     String   @unique\n  password  String\n  firstName String\n  lastName  String\n  role      UserRole @default(STUDENT)\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n\n  profile          Profile?\n  taughtCourses    Course[]          @relation(\"TeacherCourses\")\n  enrollments      Enrollment[]\n  progress         LessonProgress[]\n  quizAttempts     QuizAttempt[]\n  sentMessages     Message[]         @relation(\"SentMessages\")\n  receivedMessages Message[]         @relation(\"ReceivedMessages\")\n  achievements     UserAchievement[]\n  payments         Payment[]\n  announcements    Announcement[]\n}\n\nmodel Profile {\n  id        String  @id @default(cuid())\n  bio       String? @db.Text\n  avatarUrl String?\n  userId    String  @unique\n  user      User    @relation(fields: [userId], references: [id])\n}\n\nmodel Course {\n  id          String        @id @default(cuid())\n  title       String\n  description String        @db.Text\n  level       CourseLevel\n  price       Float\n  thumbnail   String?\n  status      PublishStatus @default(DRAFT)\n  featured    Boolean       @default(false)\n  createdAt   DateTime      @default(now())\n  updatedAt   DateTime      @updatedAt\n\n  teacherId String\n  teacher   User   @relation(\"TeacherCourses\", fields: [teacherId], references: [id])\n\n  lessons       Lesson[]\n  enrollments   Enrollment[]\n  announcements Announcement[]\n  paymentItems  PaymentItem[]\n}\n\nmodel Lesson {\n  id       String  @id @default(cuid())\n  title    String\n  content  String  @db.Text\n  videoUrl String?\n  order    Int\n\n  courseId String\n  course   Course @relation(fields: [courseId], references: [id])\n\n  progress LessonProgress[]\n  quiz     Quiz?\n\n  createdAt DateTime @default(now())\n  updatedAt DateTime @updatedAt\n}\n\n// --- Modèles de relations et de suivi ---\n\nmodel Enrollment {\n  id         String   @id @default(cuid())\n  enrolledAt DateTime @default(now())\n  progress   Float    @default(0) // Pourcentage de complétion\n\n  studentId String\n  student   User   @relation(fields: [studentId], references: [id])\n\n  courseId String\n  course   Course @relation(fields: [courseId], references: [id])\n\n  @@unique([studentId, courseId])\n}\n\nmodel LessonProgress {\n  id        String  @id @default(cuid())\n  completed Boolean @default(false)\n  timeSpent Int     @default(0) // en secondes\n\n  studentId String\n  student   User   @relation(fields: [studentId], references: [id])\n\n  lessonId String\n  lesson   Lesson @relation(fields: [lessonId], references: [id])\n\n  @@unique([studentId, lessonId])\n}\n\n// --- Modèles pour les Quiz ---\n\nmodel Quiz {\n  id    String @id @default(cuid())\n  title String\n\n  lessonId String @unique\n  lesson   Lesson @relation(fields: [lessonId], references: [id])\n\n  questions Question[]\n  attempts  QuizAttempt[]\n}\n\nmodel Question {\n  id   String @id @default(cuid())\n  text String\n\n  quizId String\n  quiz   Quiz   @relation(fields: [quizId], references: [id])\n\n  choices Choice[]\n  answers Answer[]\n}\n\nmodel Choice {\n  id        String  @id @default(cuid())\n  text      String\n  isCorrect Boolean\n\n  questionId String\n  question   Question @relation(fields: [questionId], references: [id])\n\n  answers Answer[]\n}\n\nmodel QuizAttempt {\n  id          String   @id @default(cuid())\n  score       Float\n  timeSpent   Int // en secondes\n  submittedAt DateTime @default(now())\n\n  studentId String\n  student   User   @relation(fields: [studentId], references: [id])\n\n  quizId String\n  quiz   Quiz   @relation(fields: [quizId], references: [id])\n\n  answers Answer[]\n}\n\nmodel Answer {\n  id String @id @default(cuid())\n\n  attemptId String\n  attempt   QuizAttempt @relation(fields: [attemptId], references: [id])\n\n  questionId String\n  question   Question @relation(fields: [questionId], references: [id])\n\n  choiceId String\n  choice   Choice @relation(fields: [choiceId], references: [id])\n\n  @@unique([attemptId, questionId])\n}\n\n// --- Modèles pour la boutique et les paiements ---\n\nmodel Product {\n  id          String   @id @default(cuid())\n  name        String\n  description String   @db.Text\n  price       Float\n  imageUrl    String?\n  category    String\n  active      Boolean  @default(true)\n  createdAt   DateTime @default(now())\n  updatedAt   DateTime @updatedAt\n\n  paymentItems PaymentItem[]\n}\n\nmodel Payment {\n  id            String        @id @default(cuid())\n  amount        Float\n  currency      String        @default(\"XOF\")\n  status        PaymentStatus @default(PENDING)\n  provider      String // \"stripe\", \"paypal\", etc.\n  transactionId String?\n  createdAt     DateTime      @default(now())\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id])\n\n  items PaymentItem[]\n}\n\nmodel PaymentItem {\n  id       String @id @default(cuid())\n  quantity Int\n  price    Float // Prix au moment de l'achat\n\n  paymentId String\n  payment   Payment @relation(fields: [paymentId], references: [id])\n\n  productId String?\n  product   Product? @relation(fields: [productId], references: [id])\n\n  courseId String?\n  course   Course? @relation(fields: [courseId], references: [id])\n}\n\n// --- Modèles pour la communication et la gamification ---\n\nmodel Announcement {\n  id        String   @id @default(cuid())\n  title     String\n  content   String   @db.Text\n  createdAt DateTime @default(now())\n\n  authorId String\n  author   User   @relation(fields: [authorId], references: [id])\n\n  courseId String?\n  course   Course? @relation(fields: [courseId], references: [id])\n}\n\nmodel Message {\n  id        String   @id @default(cuid())\n  content   String   @db.Text\n  read      Boolean  @default(false)\n  createdAt DateTime @default(now())\n\n  senderId String\n  sender   User   @relation(\"SentMessages\", fields: [senderId], references: [id])\n\n  recipientId String\n  recipient   User   @relation(\"ReceivedMessages\", fields: [recipientId], references: [id])\n}\n\nmodel Achievement {\n  id          String  @id @default(cuid())\n  code        String  @unique // Un code unique pour l'identifier par programme, ex: \"COMPLETE_A1_COURSE\"\n  name        String\n  description String\n  iconUrl     String?\n\n  users UserAchievement[]\n}\n\nmodel UserAchievement {\n  id       String   @id @default(cuid())\n  earnedAt DateTime @default(now())\n\n  userId String\n  user   User   @relation(fields: [userId], references: [id])\n\n  achievementId String\n  achievement   Achievement @relation(fields: [achievementId], references: [id])\n\n  @@unique([userId, achievementId])\n}\n\nmodel Campaign {\n  id        String         @id @default(cuid())\n  name      String\n  startDate DateTime\n  endDate   DateTime\n  budget    Float\n  status    CampaignStatus @default(ACTIVE)\n}\n\n// --- Enums (Types de données personnalisés) ---\n\nenum UserRole {\n  ADMIN\n  TEACHER\n  STUDENT\n}\n\nenum CourseLevel {\n  A1\n  A2\n  B1\n  B2\n  C1\n  C2\n}\n\nenum PublishStatus {\n  DRAFT\n  PUBLISHED\n}\n\nenum PaymentStatus {\n  PENDING\n  COMPLETED\n  FAILED\n}\n\nenum CampaignStatus {\n  ACTIVE\n  PAUSED\n  ENDED\n}\n",
  "inlineSchemaHash": "bff1aecbf6cc7988de334302f0c18df0f754f93ad9db8488deaca21c5f67212f",
  "copyEngine": true
}
config.dirname = '/'

config.runtimeDataModel = JSON.parse("{\"models\":{\"User\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"email\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"password\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"firstName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lastName\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"role\",\"kind\":\"enum\",\"type\":\"UserRole\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"profile\",\"kind\":\"object\",\"type\":\"Profile\",\"relationName\":\"ProfileToUser\"},{\"name\":\"taughtCourses\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"TeacherCourses\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"progress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"LessonProgressToUser\"},{\"name\":\"quizAttempts\",\"kind\":\"object\",\"type\":\"QuizAttempt\",\"relationName\":\"QuizAttemptToUser\"},{\"name\":\"sentMessages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"SentMessages\"},{\"name\":\"receivedMessages\",\"kind\":\"object\",\"type\":\"Message\",\"relationName\":\"ReceivedMessages\"},{\"name\":\"achievements\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"payments\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToUser\"},{\"name\":\"announcements\",\"kind\":\"object\",\"type\":\"Announcement\",\"relationName\":\"AnnouncementToUser\"}],\"dbName\":null},\"Profile\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"bio\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"avatarUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ProfileToUser\"}],\"dbName\":null},\"Course\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"level\",\"kind\":\"enum\",\"type\":\"CourseLevel\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"thumbnail\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PublishStatus\"},{\"name\":\"featured\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"teacherId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"teacher\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"TeacherCourses\"},{\"name\":\"lessons\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"CourseToLesson\"},{\"name\":\"enrollments\",\"kind\":\"object\",\"type\":\"Enrollment\",\"relationName\":\"CourseToEnrollment\"},{\"name\":\"announcements\",\"kind\":\"object\",\"type\":\"Announcement\",\"relationName\":\"AnnouncementToCourse\"},{\"name\":\"paymentItems\",\"kind\":\"object\",\"type\":\"PaymentItem\",\"relationName\":\"CourseToPaymentItem\"}],\"dbName\":null},\"Lesson\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"videoUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"order\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToLesson\"},{\"name\":\"progress\",\"kind\":\"object\",\"type\":\"LessonProgress\",\"relationName\":\"LessonToLessonProgress\"},{\"name\":\"quiz\",\"kind\":\"object\",\"type\":\"Quiz\",\"relationName\":\"LessonToQuiz\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"}],\"dbName\":null},\"Enrollment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"enrolledAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"progress\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"EnrollmentToUser\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToEnrollment\"}],\"dbName\":null},\"LessonProgress\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"completed\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"LessonProgressToUser\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lesson\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToLessonProgress\"}],\"dbName\":null},\"Quiz\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lessonId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"lesson\",\"kind\":\"object\",\"type\":\"Lesson\",\"relationName\":\"LessonToQuiz\"},{\"name\":\"questions\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"QuestionToQuiz\"},{\"name\":\"attempts\",\"kind\":\"object\",\"type\":\"QuizAttempt\",\"relationName\":\"QuizToQuizAttempt\"}],\"dbName\":null},\"Question\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quizId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quiz\",\"kind\":\"object\",\"type\":\"Quiz\",\"relationName\":\"QuestionToQuiz\"},{\"name\":\"choices\",\"kind\":\"object\",\"type\":\"Choice\",\"relationName\":\"ChoiceToQuestion\"},{\"name\":\"answers\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToQuestion\"}],\"dbName\":null},\"Choice\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"text\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"isCorrect\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"ChoiceToQuestion\"},{\"name\":\"answers\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToChoice\"}],\"dbName\":null},\"QuizAttempt\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"score\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"timeSpent\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"submittedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"studentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"student\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"QuizAttemptToUser\"},{\"name\":\"quizId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quiz\",\"kind\":\"object\",\"type\":\"Quiz\",\"relationName\":\"QuizToQuizAttempt\"},{\"name\":\"answers\",\"kind\":\"object\",\"type\":\"Answer\",\"relationName\":\"AnswerToQuizAttempt\"}],\"dbName\":null},\"Answer\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attemptId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"attempt\",\"kind\":\"object\",\"type\":\"QuizAttempt\",\"relationName\":\"AnswerToQuizAttempt\"},{\"name\":\"questionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"question\",\"kind\":\"object\",\"type\":\"Question\",\"relationName\":\"AnswerToQuestion\"},{\"name\":\"choiceId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"choice\",\"kind\":\"object\",\"type\":\"Choice\",\"relationName\":\"AnswerToChoice\"}],\"dbName\":null},\"Product\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"imageUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"category\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"active\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"updatedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"paymentItems\",\"kind\":\"object\",\"type\":\"PaymentItem\",\"relationName\":\"PaymentItemToProduct\"}],\"dbName\":null},\"Payment\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"amount\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"currency\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"PaymentStatus\"},{\"name\":\"provider\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"transactionId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"PaymentToUser\"},{\"name\":\"items\",\"kind\":\"object\",\"type\":\"PaymentItem\",\"relationName\":\"PaymentToPaymentItem\"}],\"dbName\":null},\"PaymentItem\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"quantity\",\"kind\":\"scalar\",\"type\":\"Int\"},{\"name\":\"price\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"paymentId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"payment\",\"kind\":\"object\",\"type\":\"Payment\",\"relationName\":\"PaymentToPaymentItem\"},{\"name\":\"productId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"product\",\"kind\":\"object\",\"type\":\"Product\",\"relationName\":\"PaymentItemToProduct\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"CourseToPaymentItem\"}],\"dbName\":null},\"Announcement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"title\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"authorId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"author\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"AnnouncementToUser\"},{\"name\":\"courseId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"course\",\"kind\":\"object\",\"type\":\"Course\",\"relationName\":\"AnnouncementToCourse\"}],\"dbName\":null},\"Message\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"content\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"read\",\"kind\":\"scalar\",\"type\":\"Boolean\"},{\"name\":\"createdAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"senderId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"sender\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"SentMessages\"},{\"name\":\"recipientId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"recipient\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"ReceivedMessages\"}],\"dbName\":null},\"Achievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"code\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"description\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"iconUrl\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"users\",\"kind\":\"object\",\"type\":\"UserAchievement\",\"relationName\":\"AchievementToUserAchievement\"}],\"dbName\":null},\"UserAchievement\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"earnedAt\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"userId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"user\",\"kind\":\"object\",\"type\":\"User\",\"relationName\":\"UserToUserAchievement\"},{\"name\":\"achievementId\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"achievement\",\"kind\":\"object\",\"type\":\"Achievement\",\"relationName\":\"AchievementToUserAchievement\"}],\"dbName\":null},\"Campaign\":{\"fields\":[{\"name\":\"id\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"name\",\"kind\":\"scalar\",\"type\":\"String\"},{\"name\":\"startDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"endDate\",\"kind\":\"scalar\",\"type\":\"DateTime\"},{\"name\":\"budget\",\"kind\":\"scalar\",\"type\":\"Float\"},{\"name\":\"status\",\"kind\":\"enum\",\"type\":\"CampaignStatus\"}],\"dbName\":null}},\"enums\":{},\"types\":{}}")
defineDmmfProperty(exports.Prisma, config.runtimeDataModel)
config.engineWasm = {
  getRuntime: async () => require('./query_engine_bg.js'),
  getQueryEngineWasmModule: async () => {
    const loader = (await import('#wasm-engine-loader')).default
    const engine = (await loader).default
    return engine
  }
}
config.compilerWasm = undefined

config.injectableEdgeEnv = () => ({
  parsed: {
    DATABASE_URL: typeof globalThis !== 'undefined' && globalThis['DATABASE_URL'] || typeof process !== 'undefined' && process.env && process.env.DATABASE_URL || undefined
  }
})

if (typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined) {
  Debug.enable(typeof globalThis !== 'undefined' && globalThis['DEBUG'] || typeof process !== 'undefined' && process.env && process.env.DEBUG || undefined)
}

const PrismaClient = getPrismaClient(config)
exports.PrismaClient = PrismaClient
Object.assign(exports, Prisma)
