
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.16.2
 * Query Engine version: 1c57fdcd7e44b29b9313256c76699e91c3ac3c43
 */
Prisma.prismaVersion = {
  client: "6.16.2",
  engine: "1c57fdcd7e44b29b9313256c76699e91c3ac3c43"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName',
  role: 'role',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ProfileScalarFieldEnum = {
  id: 'id',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  userId: 'userId'
};

exports.Prisma.CourseScalarFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  level: 'level',
  price: 'price',
  thumbnail: 'thumbnail',
  status: 'status',
  featured: 'featured',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  teacherId: 'teacherId'
};

exports.Prisma.LessonScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  videoUrl: 'videoUrl',
  order: 'order',
  courseId: 'courseId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.EnrollmentScalarFieldEnum = {
  id: 'id',
  enrolledAt: 'enrolledAt',
  progress: 'progress',
  studentId: 'studentId',
  courseId: 'courseId'
};

exports.Prisma.LessonProgressScalarFieldEnum = {
  id: 'id',
  completed: 'completed',
  timeSpent: 'timeSpent',
  studentId: 'studentId',
  lessonId: 'lessonId'
};

exports.Prisma.QuizScalarFieldEnum = {
  id: 'id',
  title: 'title',
  lessonId: 'lessonId'
};

exports.Prisma.QuestionScalarFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId'
};

exports.Prisma.ChoiceScalarFieldEnum = {
  id: 'id',
  text: 'text',
  isCorrect: 'isCorrect',
  questionId: 'questionId'
};

exports.Prisma.QuizAttemptScalarFieldEnum = {
  id: 'id',
  score: 'score',
  timeSpent: 'timeSpent',
  submittedAt: 'submittedAt',
  studentId: 'studentId',
  quizId: 'quizId'
};

exports.Prisma.AnswerScalarFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  choiceId: 'choiceId'
};

exports.Prisma.ProductScalarFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  price: 'price',
  imageUrl: 'imageUrl',
  category: 'category',
  active: 'active',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  amount: 'amount',
  currency: 'currency',
  status: 'status',
  provider: 'provider',
  transactionId: 'transactionId',
  createdAt: 'createdAt',
  userId: 'userId'
};

exports.Prisma.PaymentItemScalarFieldEnum = {
  id: 'id',
  quantity: 'quantity',
  price: 'price',
  paymentId: 'paymentId',
  productId: 'productId',
  courseId: 'courseId'
};

exports.Prisma.AnnouncementScalarFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  createdAt: 'createdAt',
  authorId: 'authorId',
  courseId: 'courseId'
};

exports.Prisma.MessageScalarFieldEnum = {
  id: 'id',
  content: 'content',
  read: 'read',
  createdAt: 'createdAt',
  senderId: 'senderId',
  recipientId: 'recipientId'
};

exports.Prisma.AchievementScalarFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
};

exports.Prisma.UserAchievementScalarFieldEnum = {
  id: 'id',
  earnedAt: 'earnedAt',
  userId: 'userId',
  achievementId: 'achievementId'
};

exports.Prisma.CampaignScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startDate: 'startDate',
  endDate: 'endDate',
  budget: 'budget',
  status: 'status'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  email: 'email',
  password: 'password',
  firstName: 'firstName',
  lastName: 'lastName'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.ProfileOrderByRelevanceFieldEnum = {
  id: 'id',
  bio: 'bio',
  avatarUrl: 'avatarUrl',
  userId: 'userId'
};

exports.Prisma.CourseOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  description: 'description',
  thumbnail: 'thumbnail',
  teacherId: 'teacherId'
};

exports.Prisma.LessonOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  videoUrl: 'videoUrl',
  courseId: 'courseId'
};

exports.Prisma.EnrollmentOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  courseId: 'courseId'
};

exports.Prisma.LessonProgressOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  lessonId: 'lessonId'
};

exports.Prisma.QuizOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  lessonId: 'lessonId'
};

exports.Prisma.QuestionOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  quizId: 'quizId'
};

exports.Prisma.ChoiceOrderByRelevanceFieldEnum = {
  id: 'id',
  text: 'text',
  questionId: 'questionId'
};

exports.Prisma.QuizAttemptOrderByRelevanceFieldEnum = {
  id: 'id',
  studentId: 'studentId',
  quizId: 'quizId'
};

exports.Prisma.AnswerOrderByRelevanceFieldEnum = {
  id: 'id',
  attemptId: 'attemptId',
  questionId: 'questionId',
  choiceId: 'choiceId'
};

exports.Prisma.ProductOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  description: 'description',
  imageUrl: 'imageUrl',
  category: 'category'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  currency: 'currency',
  provider: 'provider',
  transactionId: 'transactionId',
  userId: 'userId'
};

exports.Prisma.PaymentItemOrderByRelevanceFieldEnum = {
  id: 'id',
  paymentId: 'paymentId',
  productId: 'productId',
  courseId: 'courseId'
};

exports.Prisma.AnnouncementOrderByRelevanceFieldEnum = {
  id: 'id',
  title: 'title',
  content: 'content',
  authorId: 'authorId',
  courseId: 'courseId'
};

exports.Prisma.MessageOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  senderId: 'senderId',
  recipientId: 'recipientId'
};

exports.Prisma.AchievementOrderByRelevanceFieldEnum = {
  id: 'id',
  code: 'code',
  name: 'name',
  description: 'description',
  iconUrl: 'iconUrl'
};

exports.Prisma.UserAchievementOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  achievementId: 'achievementId'
};

exports.Prisma.CampaignOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name'
};
exports.UserRole = exports.$Enums.UserRole = {
  ADMIN: 'ADMIN',
  TEACHER: 'TEACHER',
  STUDENT: 'STUDENT'
};

exports.CourseLevel = exports.$Enums.CourseLevel = {
  A1: 'A1',
  A2: 'A2',
  B1: 'B1',
  B2: 'B2',
  C1: 'C1',
  C2: 'C2'
};

exports.PublishStatus = exports.$Enums.PublishStatus = {
  DRAFT: 'DRAFT',
  PUBLISHED: 'PUBLISHED'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  PENDING: 'PENDING',
  COMPLETED: 'COMPLETED',
  FAILED: 'FAILED'
};

exports.CampaignStatus = exports.$Enums.CampaignStatus = {
  ACTIVE: 'ACTIVE',
  PAUSED: 'PAUSED',
  ENDED: 'ENDED'
};

exports.Prisma.ModelName = {
  User: 'User',
  Profile: 'Profile',
  Course: 'Course',
  Lesson: 'Lesson',
  Enrollment: 'Enrollment',
  LessonProgress: 'LessonProgress',
  Quiz: 'Quiz',
  Question: 'Question',
  Choice: 'Choice',
  QuizAttempt: 'QuizAttempt',
  Answer: 'Answer',
  Product: 'Product',
  Payment: 'Payment',
  PaymentItem: 'PaymentItem',
  Announcement: 'Announcement',
  Message: 'Message',
  Achievement: 'Achievement',
  UserAchievement: 'UserAchievement',
  Campaign: 'Campaign'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
